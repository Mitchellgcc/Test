üß† THE FULLY UPDATED AUTONOMOUS CURSOR MICRO-WORKFLOW (WITH FULL VISIBILITY + CI DEPLOYS + SUPABASE)

üõ∞Ô∏è STEP 0: VISIBILITY & CI PREVIEW SET-UP

# HumanToDo

Do this once to ensure you can monitor & interact with your builds entirely from a phone.
‚úÖ 0.1 Cursor Web + Mobile
Go to https://cursor.com/agents
Tap "Add to Home Screen" to install as mobile app (PWA)
Enable Push Notifications in browser
‚úÖ 0.2 Slack Bot Integration
/apps install cursor
/cursor link https://github.com/YOUR_ORG/YOUR_REPO
Mention @Cursor in a thread to spawn/resume agents
Note: Background Agents already send "Tool-call cap reached" DMs
‚úÖ 0.3 GitHub Mobile
Install GitHub app (iOS/Android)
Enable PR notifications
Star your repo for easy access
‚úÖ 0.4 Preview Deploys via Vercel (or Netlify)
Connect repo to Vercel
Enable Preview Deployments per PR
Get your Vercel team/org slug for non-interactive deployment
‚úÖ 0.5 Supabase Project Setup
Create project at https://supabase.com/dashboard
Get Project URL and Anon Key from Settings ‚Üí API
Generate Service Role key for admin operations
Install Supabase CLI: npm install -g supabase
Link local project: supabase link --project-ref YOUR_PROJECT_ID
‚úÖ 0.6 Essential Production Services
**Sentry** (Error Tracking): Create project ‚Üí copy DSN
**Axiom** (Structured Logs): Create source ‚Üí copy token
**Upstash Redis** (Cache): Create database ‚Üí copy REST URL + token
Optional: **Resend** (Email): Add domain ‚Üí verify DNS ‚Üí create API key

# CursorToDo
üîß STEP 1: PROJECT INFRASTRUCTURE SETUP

‚úÖ 1.1 Create .cursor/environment.json
Tell Cursor how to install, start, and test inside the remote agent VM:

{
  "install": "npm i -g supabase && pnpm install --prefer-offline --frozen-lockfile",
  "terminals": [
    { "name": "dev",    "command": "pnpm dev" },
    { "name": "test",   "command": "pnpm test" },
    { "name": "build",  "command": "pnpm build" },
    { "name": "lint",   "command": "pnpm lint" },
    { "name": "types",  "command": "echo 'Run gen types in queue only'" },
    { "name": "deploy", "command": "echo 'Deploy handled by queue'" }
  ]
}
Add these secrets in Cursor UI ‚Üí Project ‚Üí Secrets:
- VERCEL_TOKEN
- VERCEL_ORG (your team/org slug)
- SLACK_WEBHOOK  
- SUPABASE_URL
- SUPABASE_ANON_KEY
- SUPABASE_SERVICE_ROLE_KEY
- SUPABASE_ACCESS_TOKEN (for CLI operations)
- SENTRY_DSN
- AXIOM_TOKEN
- UPSTASH_REDIS_REST_URL
- UPSTASH_REDIS_REST_TOKEN
Optional (if using email):
- RESEND_API_KEY

‚úÖ 1.2 Define .cursor/rules
Injected into every agent prompt:

- Use TypeScript for all backend and frontend logic
- Avoid editing any files in /legacy or /vendor
- Always generate unit and integration tests with new features
- Use async/await only, never .then()
- Follow domain-driven naming conventions (e.g., loginController)
- Keep directory well-structured, build folders where necessary
- Always add parseable terminal output to test runners:
  - console.log("‚úÖ TESTS PASSED") for success
  - console.log("‚ùå TEST FAILURE") for failures
- Run tests via pnpm test and show clear ‚úÖ or ‚ùå status
- Add extra logging during testing for maximum visibility
- When tests fail, keep adding logging until issues are identified and fixed
- Always check if a server/dev process is running before starting a new one
- Use chat.completions.create for OpenAI API calls, not deprecated endpoints
- For web projects: use dark mode, colorful DaisyUI, Tailwind, and anime.js
- Include nice waiting animations for user-facing operations
- Always run tests live unless specifically asked to mock
- After opening a PR, always run the DEPLOY & NOTIFY step
- All preview URLs must be echoed as: üåê PREVIEW_URL=<url>
- After REFLECT, always execute JOURNAL then PUSH
- The JOURNAL entry must be ‚â§ 20 lines
- Always list modified paths relative to repo root
- Before starting work, read docs/agent-log.md for previous agent context
- Use Supabase for all database, auth, and real-time features
- Generate TypeScript types from Supabase schema after migrations: supabase gen types typescript --local > src/types/database.types.ts
- Create database migrations with: supabase migration new --name <slug> --no-editor
- Use Row Level Security (RLS) for all database tables
- Prefer Supabase Edge Functions over traditional API routes when possible
- Always test database operations with hosted Supabase instance (local Docker unavailable in VM)
- Include database schema changes in JOURNAL entries
- Never output $SUPABASE_SERVICE_ROLE_KEY in console logs
- Wrap all server/Edge functions with Sentry.init() and try-catch blocks
- Use Axiom for structured logging; avoid console.log spam in production
- Prefer Upstash Redis for ephemeral cache; never store PII
- Cache expensive Supabase queries in Redis with TTL
- Log errors and performance metrics to Axiom with structured data

‚úÖ 1.3 Git Setup
git init
git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git
git branch -m main
git add .
git commit -m "Initial setup: Autonomous Cursor workflow infrastructure"
git push -u origin main
üö® Agents require Git branches to push PRs

‚úÖ 1.4 Create .gitignore
# Dependencies
node_modules/
# Builds
dist/
build/
out/
# Env
.env*
# OS
.DS_Store
# IDE
.vscode/
.idea/
# Supabase
.supabase/

‚úÖ 1.5 Create Supabase Configuration
supabase init
supabase link --project-ref YOUR_PROJECT_ID
echo "SUPABASE_URL=$SUPABASE_URL" > .env.local
echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env.local
git add supabase/ .env.local && git commit -m "feat: add Supabase configuration" && git push

‚úÖ 1.6 Create docs/agent-log.md
mkdir -p docs
echo "# Agent Handoff Log\n\nContext persistence for autonomous agent workflows.\n" > docs/agent-log.md
git add docs/agent-log.md && git commit -m "feat: add agent handoff log" && git push

‚úÖ 1.7 Create Production Monitoring Setup
Create src/lib/monitoring.ts:
```typescript
// Sentry Error Tracking
import * as Sentry from '@sentry/nextjs'
export const initSentry = () => Sentry.init({ dsn: process.env.SENTRY_DSN })

// Axiom Structured Logging  
import { Axiom } from '@axiom-dev/js'
export const axiom = new Axiom({ token: process.env.AXIOM_TOKEN })

// Upstash Redis Cache
import { Redis } from '@upstash/redis'
export const redis = new Redis({
  url: process.env.UPSTASH_REDIS_REST_URL,
  token: process.env.UPSTASH_REDIS_REST_TOKEN
})
```
git add src/lib/monitoring.ts && git commit -m "feat: add monitoring infrastructure" && git push

‚úÖ 1.8 Persist "Memories" in Cursor
Go to Cursor IDE > Right Panel > Memories
Add:

"We use Supabase for database, auth, and real-time features."
"Always generate TypeScript types from Supabase schema."
"Use Row Level Security (RLS) for all database tables."
"UI is built with React + Tailwind + DaisyUI dark mode."
"Tests must run via pnpm test and show ‚úÖ or ‚ùå."
"Deploy previews go through Vercel, echoing üåê PREVIEW_URL=<url>."
"Always read docs/agent-log.md before starting work for context from previous agents."
"Include database schema changes in JOURNAL entries."
"Wrap all server functions with Sentry error tracking."
"Use Axiom for structured logging, avoid console.log in production."
"Cache expensive queries in Upstash Redis with TTL."

üóÇ STEP 2: PREPARE DAILY TASK PLAN (external)

Cursor doesn't read .md files ‚Äî you paste each task into the agent queue.
Example:

## Agent: user-auth-agent

1. Create Supabase auth table migration
2. Add RLS policies for user data
3. Create auth utilities in src/lib/supabase.ts
4. Build login/signup components with DaisyUI
5. Add auth state management
6. Generate TypeScript types: supabase gen types typescript --local > src/types/database.types.ts
7. Add Sentry error tracking to auth functions
8. Cache auth state in Redis with 1h TTL
9. Run pnpm test
10. Submit PR

### REFLECT
Summarise progress  
Suggest next 3 tasks  
Output them as ### NEXT_QUEUE

### JOURNAL
1. Read docs/agent-log.md (create if missing)
2. Append using printf to avoid race conditions:

printf "## %s ‚Äì %s\n- Scope: %s\n- Key files touched: %s\n- Database changes: %s\n- Tests: %s\n- Preview: %s\n- Next tasks: %s\n\n" \
  "$AGENT_NAME" "$(date -Iseconds)" \
  "[high-level goal]" "[list]" "[migrations/schema]" \
  "$TEST_STATUS" "$PREVIEW_URL" "[3 bullet points]" >> docs/agent-log.md

3. Save file

### MONITOR
Log key metrics to Axiom:
axiom.ingest('agent-metrics', { 
  agent: '$AGENT_NAME', 
  status: '$TEST_STATUS', 
  preview_url: '$PREVIEW_URL' 
})

### DEPLOY
PREVIEW_URL=$(vercel --prod --scope $VERCEL_ORG --token $VERCEL_TOKEN --yes | tail -n1)
echo "üåê PREVIEW_URL=${PREVIEW_URL}"

### NOTIFY
curl -X POST $SLACK_WEBHOOK -d "{\"text\":\"üöÄ ${AGENT_NAME} deployed: ${PREVIEW_URL}\"}"

### PUSH
git add docs/agent-log.md
git commit -m "chore(log): journal update ${AGENT_NAME} ‚úÖ ${TEST_STATUS} üåê ${PREVIEW_URL}"
git push --set-upstream origin <branch>
gh pr create --fill

### EXIT_ON_SUCCESS
ü§ñ STEP 3: SPAWN & QUEUE AGENTS

‚úÖ 3.1 Open Cursor + Wait for Project Indexing
‚úÖ 3.2 Spawn Background Agent
Ctrl + E ‚Üí Background Agent
Name it (e.g., user-auth-agent)
Paste: "Review docs/agent-log.md for context from previous agents, then continue with:"
Paste initial prompt from backlog
‚úÖ 3.3 Queue Prompts
Paste remaining queue prompts, ending with REFLECT, JOURNAL, MONITOR, DEPLOY, NOTIFY, PUSH, and EXIT_ON_SUCCESS.

Monitor agent in Cursor Web, Slack, or desktop IDE.

üß™ STEP 4: ENABLE SELF-MONITORING & RECOVERY

‚úÖ 4.1 In Test Runners
if (passed) {
  console.log("‚úÖ TESTS PASSED")
} else {
  console.log("‚ùå TEST FAILURE")
  Sentry.captureException(new Error("Test failure"))
}
‚úÖ 4.2 In Prompts
Run pnpm test  
If output contains ‚ùå, regenerate broken tests and retry once  
Only open PR on ‚úÖ
üîÅ STEP 5: CODE REVIEW & MERGE

‚úÖ 5.1 BugBot Review
PR auto-reviewed
Inline comments + "Fix in Cursor" button
‚úÖ 5.2 Optional Review Agent
1. Checkout PR #123  
2. Run tests  
3. Patch if lint or coverage < 90%  
4. Approve PR if clean
‚úÖ 5.3 Merge via GitHub Mobile
Use squash-merge or main-branch promotion
CI will deploy automatically

üßº STEP 6: DAILY RESET

‚úÖ 6.1 Clean Branches
After merging, delete stale branches if not auto-deleted

‚úÖ 6.2 Archive Task Logs
Rename task file: tasks-2025-07-03.md
Use it to compare REFLECT output from agent vs plan

üß≠ OPTIONAL DAILY SCHEDULE TEMPLATE

Time	Action
08:30	Write task prompts + goals
09:00	Spawn agents and queue
09:15‚Äì12:00	Cursor builds/tests/reflects
12:00	Check preview links in Slack
13:00	Review PRs on GitHub Mobile
14:00‚Äì17:00	Queue next feature set
17:00‚Äì18:00	Merge PRs, cleanup, archive

üõ† COMMON ISSUES & FIXES

Issue	Fix
Agent stuck on Y/n prompt	Ensure all install/dev/test commands are non-interactive
Agent can't deploy	Add $VERCEL_TOKEN and $VERCEL_ORG as project secrets
Preview URL not found	Capture via subshell: PREVIEW_URL=$(vercel --prod --scope $VERCEL_ORG --token $VERCEL_TOKEN --yes | tail -n1)
No Slack pings	Check $SLACK_WEBHOOK is set + added in queue
Agent tool-call limit hit	Use Max Mode or add @Cursor resume agent-name in Slack
Agent ignores previous context	Ensure "Review docs/agent-log.md" is first in every agent prompt
Context handoff broken	Check docs/agent-log.md exists and agents are appending (not overwriting)
Supabase CLI not found	Ensure "npm i -g supabase" is in environment.json install command
Database types out of sync	Run "supabase gen types typescript --local > src/types/database.types.ts" after migrations
RLS policies blocking queries	Check policies allow authenticated users, test with hosted instance
Docker unavailable in VM	Use hosted Supabase instance, skip supabase start --docker
Migration creation prompts	Use "supabase migration new --name <slug> --no-editor"
Service role key exposed	Never log $SUPABASE_SERVICE_ROLE_KEY in console output
Sentry not initialized	Add Sentry.init() to app entry point
Axiom logs not appearing	Check AXIOM_TOKEN is set and axiom.ingest() is called
Redis cache misses	Check UPSTASH_REDIS_REST_URL and REST_TOKEN are correct
Rate limit exceeded	Implement Redis-based rate limiting and caching

üéØ QUICK COPY-PASTE AGENT QUEUE TAIL

### REFLECT
Summarise work completed in 3-5 lines
List 3 NEXT_QUEUE tasks for subsequent agents

### JOURNAL
printf "## %s ‚Äì %s\n- Scope: %s\n- Files: %s\n- Database: %s\n- Tests: %s\n- Preview: %s\n- Next: %s\n\n" \
  "$AGENT_NAME" "$(date -Iseconds)" \
  "[describe high-level goal]" "[list key paths]" "[migrations/schema]" \
  "$TEST_STATUS" "$PREVIEW_URL" "[3 bullet points from REFLECT]" >> docs/agent-log.md

### MONITOR
axiom.ingest('agent-metrics', { 
  agent: '$AGENT_NAME', 
  status: '$TEST_STATUS', 
  files_touched: '[list]',
  preview_url: '$PREVIEW_URL',
  timestamp: new Date().toISOString()
})

### DEPLOY
PREVIEW_URL=$(vercel --prod --scope $VERCEL_ORG --token $VERCEL_TOKEN --yes | tail -n1)
echo "üåê PREVIEW_URL=${PREVIEW_URL}"

### NOTIFY  
curl -X POST $SLACK_WEBHOOK -d "{\"text\":\"üöÄ ${AGENT_NAME} deployed: ${PREVIEW_URL}\"}"

### PUSH
git add docs/agent-log.md
git commit -m "chore(log): ${AGENT_NAME} journal ‚úÖ ${TEST_STATUS} üåê ${PREVIEW_URL}"
git push --set-upstream origin $(git branch --show-current)
gh pr create --fill

### EXIT_ON_SUCCESS

üóÑÔ∏è SUPABASE-SPECIFIC AGENT PATTERNS

### Database Schema Agent:
```
1. Create migration: supabase migration new --name <feature_name> --no-editor
2. Add tables with RLS policies
3. Push schema: supabase db push
4. Generate types: supabase gen types typescript --local > src/types/database.types.ts
5. Test with hosted instance (Docker unavailable in VM)
6. Add Sentry error tracking to database functions
7. Cache schema metadata in Redis
8. Commit schema + types
```

### Auth Flow Agent:
```
1. Review existing auth migration from docs/agent-log.md
2. Create auth utilities in src/lib/supabase.ts with Sentry wrapping
3. Build login/signup components with proper TypeScript types
4. Add protected route middleware with Redis session caching
5. Test auth flow with hosted Supabase instance
6. Log auth events to Axiom for monitoring
```

### Edge Function Agent:
```
1. Create function: supabase functions new <function_name>
2. Implement with proper TypeScript types and Sentry initialization
3. Add Redis caching for expensive operations
4. Deploy to hosted: supabase functions deploy <function_name>
5. Add integration tests with Axiom logging
6. Test with hosted instance
```
