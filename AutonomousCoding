üß† THE FULLY UPDATED AUTONOMOUS CURSOR MICRO-WORKFLOW (WITH FULL VISIBILITY + CI DEPLOYS + SUPABASE)

üõ∞Ô∏è STEP 0: VISIBILITY & CI PREVIEW SET-UP

# HumanToDo

Do this once to ensure you can monitor & interact with your builds entirely from a phone.
‚úÖ 0.1 Cursor Web + Mobile
Go to https://cursor.com/agents
Tap "Add to Home Screen" to install as mobile app (PWA)
Enable Push Notifications in browser
‚úÖ 0.2 Slack Bot Integration
/apps install cursor
/cursor link https://github.com/YOUR_ORG/YOUR_REPO
Mention @Cursor in a thread to spawn/resume agents
Setup Slack webhook URL (for agent output ‚Üí Slack messages)
‚úÖ 0.3 GitHub Mobile
Install GitHub app (iOS/Android)
Enable PR notifications
Star your repo for easy access
‚úÖ 0.4 Preview Deploys via Vercel (or Netlify)
Connect repo to Vercel
Enable Preview Deployments per PR
Optional: add CLI deploy for final push
‚úÖ 0.5 Supabase Project Setup
Create project at https://supabase.com/dashboard
Get Project URL and Anon Key from Settings ‚Üí API
Generate Service Role key for admin operations
Install Supabase CLI: npm install -g supabase
Link local project: supabase link --project-ref YOUR_PROJECT_ID

# CursorToDo
üîß STEP 1: PROJECT INFRASTRUCTURE SETUP

‚úÖ 1.1 Create .cursor/environment.json
Tell Cursor how to install, start, and test inside the remote agent VM:

{
  "install": "rm -rf node_modules && npm install -g supabase && pnpm install --prefer-offline --frozen-lockfile",
  "terminals": [
    { "name": "dev",    "command": "pnpm dev" },
    { "name": "test",   "command": "pnpm test" },
    { "name": "build",  "command": "pnpm build" },
    { "name": "lint",   "command": "pnpm lint" },
    { "name": "db",     "command": "supabase start" },
    { "name": "types",  "command": "supabase gen types typescript --local > src/types/database.types.ts" },
    { "name": "deploy", "command": "vercel --token $VERCEL_TOKEN --yes" }
  ]
}
Add these secrets in Cursor UI ‚Üí Project ‚Üí Secrets:
- VERCEL_TOKEN
- SLACK_WEBHOOK  
- SUPABASE_URL
- SUPABASE_ANON_KEY
- SUPABASE_SERVICE_ROLE_KEY
- SUPABASE_ACCESS_TOKEN (for CLI operations)

‚úÖ 1.2 Define .cursor/rules
Injected into every agent prompt:

- Use TypeScript for all backend and frontend logic
- Avoid editing any files in /legacy or /vendor
- Always generate unit and integration tests with new features
- Use async/await only, never .then()
- Follow domain-driven naming conventions (e.g., loginController)
- Keep directory well-structured, build folders where necessary
- Always add parseable terminal output to test runners:
  - console.log("‚úÖ TESTS PASSED") for success
  - console.log("‚ùå TEST FAILURE") for failures
- Run tests via pnpm test and show clear ‚úÖ or ‚ùå status
- Add extra logging during testing for maximum visibility
- When tests fail, keep adding logging until issues are identified and fixed
- Always check if a server/dev process is running before starting a new one
- Use chat.completions.create for OpenAI API calls, not deprecated endpoints
- For web projects: use dark mode, colorful DaisyUI, Tailwind, and anime.js
- Include nice waiting animations for user-facing operations
- Always run tests live unless specifically asked to mock
- After opening a PR, always run the DEPLOY & NOTIFY step
- All preview URLs must be echoed as: üåê PREVIEW_URL=<url>
- After REFLECT, always execute JOURNAL then PUSH
- The JOURNAL entry must be ‚â§ 20 lines
- Always list modified paths relative to repo root
- Before starting work, read docs/agent-log.md for previous agent context
- Use Supabase for all database, auth, and real-time features
- Generate TypeScript types from Supabase schema: supabase gen types typescript
- Create database migrations for schema changes: supabase migration new <name>
- Use Row Level Security (RLS) for all database tables
- Prefer Supabase Edge Functions over traditional API routes when possible
- Always test database operations with local Supabase instance first
- Include database schema changes in JOURNAL entries

‚úÖ 1.3 Git Setup
git init
git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git
git branch -m main
git add .
git commit -m "Initial setup: Autonomous Cursor workflow infrastructure"
git push -u origin main
üö® Agents require Git branches to push PRs

‚úÖ 1.4 Create .gitignore
# Dependencies
node_modules/
# Builds
dist/
build/
out/
# Env
.env*
# OS
.DS_Store
# IDE
.vscode/
.idea/
# Supabase
.supabase/

‚úÖ 1.5 Create Supabase Configuration
supabase init
supabase link --project-ref YOUR_PROJECT_ID
echo "SUPABASE_URL=$SUPABASE_URL" > .env.local
echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env.local
git add supabase/ .env.local && git commit -m "feat: add Supabase configuration" && git push

‚úÖ 1.6 Create docs/agent-log.md
mkdir -p docs
echo "# Agent Handoff Log\n\nContext persistence for autonomous agent workflows.\n" > docs/agent-log.md
git add docs/agent-log.md && git commit -m "feat: add agent handoff log" && git push

‚úÖ 1.7 Persist "Memories" in Cursor
Go to Cursor IDE > Right Panel > Memories
Add:

"We use Supabase for database, auth, and real-time features."
"Always generate TypeScript types from Supabase schema."
"Use Row Level Security (RLS) for all database tables."
"UI is built with React + Tailwind + DaisyUI dark mode."
"Tests must run via pnpm test and show ‚úÖ or ‚ùå."
"Deploy previews go through Vercel, echoing üåê PREVIEW_URL=<url>."
"Always read docs/agent-log.md before starting work for context from previous agents."
"Include database schema changes in JOURNAL entries."

üóÇ STEP 2: PREPARE DAILY TASK PLAN (external)

Cursor doesn't read .md files ‚Äî you paste each task into the agent queue.
Example:

## Agent: user-auth-agent

1. Create Supabase auth table migration
2. Add RLS policies for user data
3. Create auth utilities in src/lib/supabase.ts
4. Build login/signup components with DaisyUI
5. Add auth state management
6. Generate TypeScript types: supabase gen types typescript
7. Run pnpm test
8. Submit PR

### REFLECT
Summarise progress  
Suggest next 3 tasks  
Output them as ### NEXT_QUEUE

### JOURNAL
1. Read docs/agent-log.md (create if missing)
2. Append:

## <AGENT_NAME> ‚Äì <YYYY-MM-DD HH:MM>
- Scope: <high-level goal>
- Key files touched: <list>
- Database changes: <migrations/schema updates>
- Tests: ‚úÖ or ‚ùå
- Preview: <url>
- Next tasks: <3 bullet points>

3. Save file

### DEPLOY
Run `vercel --token $VERCEL_TOKEN --yes`  
Echo üåê PREVIEW_URL=<url>

### NOTIFY
POST preview URL to $SLACK_WEBHOOK

### PUSH
git add docs/agent-log.md
git commit -m "chore(log): journal update ${AGENT_NAME} ‚úÖ TESTS PASSED üåê PREVIEW_URL=<url>"
git push --set-upstream origin <branch>
gh pr create --fill

### EXIT_ON_SUCCESS
ü§ñ STEP 3: SPAWN & QUEUE AGENTS

‚úÖ 3.1 Open Cursor + Wait for Project Indexing
‚úÖ 3.2 Spawn Background Agent
Ctrl + E ‚Üí Background Agent
Name it (e.g., user-auth-agent)
Paste: "Review docs/agent-log.md for context from previous agents, then continue with:"
Paste initial prompt from backlog
‚úÖ 3.3 Queue Prompts
Paste remaining queue prompts, ending with REFLECT, JOURNAL, DEPLOY, NOTIFY, PUSH, and EXIT_ON_SUCCESS.

Monitor agent in Cursor Web, Slack, or desktop IDE.

üß™ STEP 4: ENABLE SELF-MONITORING & RECOVERY

‚úÖ 4.1 In Test Runners
if (passed) {
  console.log("‚úÖ TESTS PASSED")
} else {
  console.log("‚ùå TEST FAILURE")
}
‚úÖ 4.2 In Prompts
Run pnpm test  
If output contains ‚ùå, regenerate broken tests and retry once  
Only open PR on ‚úÖ
üîÅ STEP 5: CODE REVIEW & MERGE

‚úÖ 5.1 BugBot Review
PR auto-reviewed
Inline comments + "Fix in Cursor" button
‚úÖ 5.2 Optional Review Agent
1. Checkout PR #123  
2. Run tests  
3. Patch if lint or coverage < 90%  
4. Approve PR if clean
‚úÖ 5.3 Merge via GitHub Mobile
Use squash-merge or main-branch promotion
CI will deploy automatically

üßº STEP 6: DAILY RESET

‚úÖ 6.1 Clean Branches
After merging, delete stale branches if not auto-deleted

‚úÖ 6.2 Archive Task Logs
Rename task file: tasks-2025-07-03.md
Use it to compare REFLECT output from agent vs plan

üß≠ OPTIONAL DAILY SCHEDULE TEMPLATE

Time	Action
08:30	Write task prompts + goals
09:00	Spawn agents and queue
09:15‚Äì12:00	Cursor builds/tests/reflects
12:00	Check preview links in Slack
13:00	Review PRs on GitHub Mobile
14:00‚Äì17:00	Queue next feature set
17:00‚Äì18:00	Merge PRs, cleanup, archive

üõ† COMMON ISSUES & FIXES

Issue	Fix
Agent stuck on Y/n prompt	Ensure all install/dev/test commands are non-interactive
Agent can't deploy	Add $VERCEL_TOKEN as project secret
Preview URL not found	Ensure agent echoes üåê PREVIEW_URL=<url> and doesn't suppress output
No Slack pings	Check $SLACK_WEBHOOK is set + added in queue
Agent tool-call limit hit	Use Max Mode or add @Cursor resume agent-name in Slack
Agent ignores previous context	Ensure "Review docs/agent-log.md" is first in every agent prompt
Context handoff broken	Check docs/agent-log.md exists and agents are appending (not overwriting)
Supabase CLI not found	Ensure "npm install -g supabase" is in environment.json install command
Database types out of sync	Run "supabase gen types typescript" after schema changes
RLS policies blocking queries	Check policies allow authenticated users, test with service role key

üéØ QUICK COPY-PASTE AGENT QUEUE TAIL

### REFLECT
Summarise work completed in 3-5 lines
List 3 NEXT_QUEUE tasks for subsequent agents

### JOURNAL
echo "## ${AGENT_NAME} ‚Äì $(date -Iseconds)" >> docs/agent-log.md
echo "- Scope: [describe high-level goal]" >> docs/agent-log.md  
echo "- Files: [list key paths touched]" >> docs/agent-log.md
echo "- Database: [migrations/schema changes]" >> docs/agent-log.md
echo "- Tests: ${TEST_STATUS}" >> docs/agent-log.md
echo "- Preview: ${PREVIEW_URL}" >> docs/agent-log.md
echo "- Next: [3 bullet points from REFLECT]" >> docs/agent-log.md
echo "" >> docs/agent-log.md

### DEPLOY
vercel --token $VERCEL_TOKEN --yes
echo "üåê PREVIEW_URL=$(cat .vercel/preview.txt)"

### NOTIFY  
curl -X POST $SLACK_WEBHOOK -d '{"text":"üöÄ '${AGENT_NAME}' deployed: '${PREVIEW_URL}'"}'

### PUSH
git add docs/agent-log.md
git commit -m "chore(log): ${AGENT_NAME} journal ‚úÖ ${TEST_STATUS} üåê ${PREVIEW_URL}"
git push --set-upstream origin $(git branch --show-current)
gh pr create --fill

### EXIT_ON_SUCCESS

üóÑÔ∏è SUPABASE-SPECIFIC AGENT PATTERNS

### Database Schema Agent:
```
1. Create migration: supabase migration new <feature_name>
2. Add tables with RLS policies
3. Generate types: supabase gen types typescript --local > src/types/database.types.ts
4. Test with local Supabase: supabase start
5. Commit schema + types
```

### Auth Flow Agent:
```
1. Review existing auth migration from docs/agent-log.md
2. Create auth utilities in src/lib/supabase.ts
3. Build login/signup components with proper TypeScript types
4. Add protected route middleware
5. Test auth flow with real Supabase instance
```

### Edge Function Agent:
```
1. Create function: supabase functions new <function_name>
2. Implement with proper TypeScript types
3. Deploy to local: supabase functions serve
4. Add integration tests
5. Deploy to production: supabase functions deploy
```
